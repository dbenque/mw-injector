// Generated file, do not modify manually!

// This file was automatically generated by informer-gen

package v1

import (
	mwinjector_v1 "github.com/dbenque/mw-injector/pkg/api/mwinjector/v1"
	internalinterfaces "github.com/dbenque/mw-injector/pkg/client/informers/externalversions/internalinterfaces"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	clientset "k8s.io/kubernetes/pkg/client/clientset_generated/clientset"
	v1 "k8s.io/kubernetes/pkg/client/listers/mwinjector/v1"
	time "time"
)

// MWInjectorInformer provides access to a shared informer and lister for
// MWInjectors.
type MWInjectorInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.MWInjectorLister
}

type mWInjectorInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewMWInjectorInformer constructs a new informer for MWInjector type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewMWInjectorInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.MwinjectorV1().MWInjectors(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.MwinjectorV1().MWInjectors(namespace).Watch(options)
			},
		},
		&mwinjector_v1.MWInjector{},
		resyncPeriod,
		indexers,
	)
}

func defaultMWInjectorInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewMWInjectorInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *mWInjectorInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&mwinjector_v1.MWInjector{}, defaultMWInjectorInformer)
}

func (f *mWInjectorInformer) Lister() v1.MWInjectorLister {
	return v1.NewMWInjectorLister(f.Informer().GetIndexer())
}
