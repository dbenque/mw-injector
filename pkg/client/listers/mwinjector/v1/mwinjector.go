// Generated file, do not modify manually!

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/dbenque/mw-injector/pkg/api/mwinjector/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MWInjectorLister helps list MWInjectors.
type MWInjectorLister interface {
	// List lists all MWInjectors in the indexer.
	List(selector labels.Selector) (ret []*v1.MWInjector, err error)
	// MWInjectors returns an object that can list and get MWInjectors.
	MWInjectors(namespace string) MWInjectorNamespaceLister
	MWInjectorListerExpansion
}

// mWInjectorLister implements the MWInjectorLister interface.
type mWInjectorLister struct {
	indexer cache.Indexer
}

// NewMWInjectorLister returns a new MWInjectorLister.
func NewMWInjectorLister(indexer cache.Indexer) MWInjectorLister {
	return &mWInjectorLister{indexer: indexer}
}

// List lists all MWInjectors in the indexer.
func (s *mWInjectorLister) List(selector labels.Selector) (ret []*v1.MWInjector, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MWInjector))
	})
	return ret, err
}

// MWInjectors returns an object that can list and get MWInjectors.
func (s *mWInjectorLister) MWInjectors(namespace string) MWInjectorNamespaceLister {
	return mWInjectorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MWInjectorNamespaceLister helps list and get MWInjectors.
type MWInjectorNamespaceLister interface {
	// List lists all MWInjectors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MWInjector, err error)
	// Get retrieves the MWInjector from the indexer for a given namespace and name.
	Get(name string) (*v1.MWInjector, error)
	MWInjectorNamespaceListerExpansion
}

// mWInjectorNamespaceLister implements the MWInjectorNamespaceLister
// interface.
type mWInjectorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MWInjectors in the indexer for a given namespace.
func (s mWInjectorNamespaceLister) List(selector labels.Selector) (ret []*v1.MWInjector, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MWInjector))
	})
	return ret, err
}

// Get retrieves the MWInjector from the indexer for a given namespace and name.
func (s mWInjectorNamespaceLister) Get(name string) (*v1.MWInjector, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mwinjector"), name)
	}
	return obj.(*v1.MWInjector), nil
}
